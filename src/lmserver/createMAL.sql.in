-- ----------------------------------------------------------------------------
-- file:   createMAL.sql
-- author: Aimee Stewart
-- ----------------------------------------------------------------------------
-- Nadya:  Need to reference APP_DIR to call this, for now do it manually
-- ----------------------------------------------------------------------------
\c template1 admin

-- ----------------------------------------------------------------------------
DROP DATABASE mal;
CREATE DATABASE mal ENCODING='UTF8'
                    LC_COLLATE='en_US.UTF-8'
                    LC_CTYPE='en_US.UTF-8'
                    TEMPLATE=template1;
\c mal
-- ----------------------------------------------------------------------------

-- Note: LM_SCHEMA = 'lm3' is in LM.common.lmconstants
CREATE SCHEMA lm3;
ALTER DATABASE "mal" SET search_path=lm3,public;
GRANT USAGE ON SCHEMA lm3 TO reader, writer;
    
-- ----------------------------------------------------------------------------
-- FIXME
-- \i @LMHOME@/lmserver/LmDbServer/config/createCommon.sql

-- \i /opt/lifemapper/lmserver/LmDbServer/config/createCommon.sql
-- Nadya:  Need to reference APP_DIR here, for now do it manually
-- \i LmDbServer/config/createCommon.sql
-- ----------------------------------------------------------------------------

-- -------------------------------
create table lm3.Experiment
(
   experimentId serial UNIQUE PRIMARY KEY,
   userId varchar(20) NOT NULL,
   expname varchar(100) NOT NULL,
   email varchar(64),
   epsgcode int,
   keywords  varchar(256),
   metadataUrl varchar(256),
   datelastmodified double precision,
   datecreated double precision,
   description text,
   UNIQUE (userId, expname)
);


-- -------------------------------
create table lm3.TaxonomySource
(
   taxonomySourceId serial UNIQUE PRIMARY KEY,
   url varchar(256),
   datasetIdentifier varchar(256) UNIQUE,
   dateCreated double precision,
   dateLastModified double precision
);

-- -------------------------------
create table lm3.ScientificName
(
   scientificNameId serial UNIQUE PRIMARY KEY,
   taxonomySourceId int REFERENCES lm3.TaxonomySource,
   taxonomyKey int,
   kingdom varchar(100),
   phylum varchar(100),
   tx_class  varchar(100),
   tx_order varchar(100),
   family  varchar(100),
   genus varchar(100),
   sciname varchar(256),
   genuskey int,
   specieskey int,
   lastcount int,
   datecreated double precision,
   datelastmodified double precision,
   UNIQUE (taxonomySourceId, taxonomyKey)
);

-- -------------------------------
-- 'query' column is the query on the source to get these occurrence
-- records.  That could (probably will be) a query on the LM Point Bucket (PBJ 
-- database) using a stored procedure or could be a WFS or REST query to a web
-- service.
create table lm3.OccurrenceSet
(
   occurrenceSetId serial UNIQUE PRIMARY KEY,
   userId varchar(20) NOT NULL REFERENCES lm3.LMUser,
   fromGbif boolean,
   displayName varchar(256),
   
   -- New
   scientificNameId int REFERENCES lm3.ScientificName,
   
   primaryEnv int,
   -- todo: change from guid to metadataUrl varchar(256)
   metadataUrl varchar(256) UNIQUE,
   dlocation varchar(256)
   -- dlocation replaces query varchar(1024),
   queryCount int,
   dateLastModified double precision,
   dateLastChecked double precision,
   bbox varchar(60),
   epsgcode integer,
   status integer,
   statusmodtime double precision,
   rawDlocation varchar(256),
   -- rawdlocation replaces downloadurl varchar(256)
);
Select AddGeometryColumn('lm3', 'occurrenceset', 'geom', 4326, 'POLYGON', 2);
ALTER TABLE lm3.OccurrenceSet ADD CONSTRAINT geometry_valid_check CHECK (st_isvalid(geom));
ALTER TABLE lm3.OccurrenceSet ADD CONSTRAINT geometry_valid_check CHECK (st_isvalid(geom));
ALTER TABLE lm3.OccurrenceSet ADD CONSTRAINT enforce_srid_geom CHECK (st_srid(geom) = 4326);
ALTER TABLE lm3.OccurrenceSet ADD CONSTRAINT enforce_dims_geom CHECK (st_ndims(geom) = 2);
CREATE INDEX spidx_occset ON lm3.OccurrenceSet USING GIST ( geom );

Select AddGeometryColumn('lm3', 'occurrenceset', 'geompts', 4326, 'MULTIPOINT', 2);
-- CREATE INDEX spidx_occset_pts ON lm3.OccurrenceSet USING GIST ( geompts );
ALTER TABLE lm3.OccurrenceSet ADD CONSTRAINT geometry_pts_valid_check CHECK (st_isvalid(geompts));
ALTER TABLE lm3.OccurrenceSet ADD CONSTRAINT enforce_srid_geompts CHECK (st_srid(geompts) = 4326);
ALTER TABLE lm3.OccurrenceSet ADD CONSTRAINT enforce_dims_geompts CHECK (st_ndims(geompts) = 2);

CREATE INDEX idx_lower_displayName on lm3.OccurrenceSet(lower(displayName));
CREATE INDEX idx_pattern_lower_displayname on lm3.OccurrenceSet  (lower(displayname) varchar_pattern_ops );
CREATE INDEX idx_queryCount ON lm3.OccurrenceSet(queryCount);
CREATE INDEX idx_min_queryCount ON lm3.OccurrenceSet((queryCount >= 50));
CREATE INDEX idx_occLastModified ON lm3.OccurrenceSet(dateLastModified);
CREATE INDEX idx_occLastChecked ON lm3.OccurrenceSet(dateLastChecked);
CREATE INDEX idx_occUser ON lm3.OccurrenceSet(userId);

-- -------------------------------
create table lm3.Algorithm
(
   algorithmId serial UNIQUE PRIMARY KEY,
   algorithmCode varchar(30) UNIQUE,
   name varchar(60),
   dateLastModified double precision
);
-- unique constraint is code

-- -------------------------------
 create table lm3.Scenario
 (
    scenarioId serial UNIQUE PRIMARY KEY,
    scenarioCode varchar(30) UNIQUE,
    -- todo: change from guid varchar(100) to metadataUrl varchar(256)
    metadataUrl varchar(256) UNIQUE,
    title varchar(256),
    author varchar(256),
    description varchar(256),
    startDate double precision,
    endDate double precision,
    units varchar(20),
    resolution double precision,
    bbox varchar(60),
    dateLastModified double precision,
    userid varchar(20)
 );
 Select AddGeometryColumn('lm3', 'scenario', 'geom', 4326, 'POLYGON', 2);
 ALTER TABLE lm3.Scenario ADD CONSTRAINT geometry_valid_check CHECK (st_isvalid(geom));
 ALTER TABLE lm3.Scenario ADD CONSTRAINT enforce_srid_geom CHECK (st_srid(geom) = 4326);
 ALTER TABLE lm3.Scenario ADD CONSTRAINT enforce_dims_geom CHECK (st_ndims(geom) = 2);
 CREATE INDEX spidx_scenario ON lm3.Scenario USING GIST ( geom );

-- -------------------------------
create table lm3.LayerType
(
   layerTypeId serial UNIQUE PRIMARY KEY,
   code varchar(30),
   title varchar(100),
   userid varchar(20) NOT NULL REFERENCES lm3.LMUser,
   description varchar(255),
   dateLastModified double precision
);
ALTER TABLE lm3.LayerType ADD CONSTRAINT unique_layertype UNIQUE (userid, code);
-- -------------------------------
-- Note: Enforce unique userid/name pairs (in code) for display layers only
create table lm3.Layer
(
   layerId serial UNIQUE PRIMARY KEY,
   userid varchar(20),
   name varchar(100),
   title varchar(100),
   author varchar(256),
   description varchar(256),

   -- dataPath = dlocation
   dataPath varchar(256),
   -- layerUrl = mapPrefix
   layerUrl varchar(100),
   metalocation varchar(256),

   gdalType int,
   ogrType int,
   isCategorical boolean,
   
   -- GDAL/OGR codes indicating driver to use when writing files
   dataFormat varchar(32),

   epsgcode int,
   mapunits varchar(20),
   resolution double precision,

   -- 'pixel' if raster data
   valAttribute varchar(20),

   startDate double precision,
   endDate double precision,
   dateLastModified double precision,

   bbox varchar(60),
   thumbnail bytea,
   
   -- Used for classification on pixel or featAttribute
   nodataVal double precision,
   minVal double precision,
   maxVal double precision,
   valUnits varchar(60),
   
   -- Used to match layers between SDM scenarios
   layerTypeId int REFERENCES lm3.LayerType
);
 ALTER TABLE lm3.Layer ADD CONSTRAINT uniquelayer UNIQUE (layerUrl, name);
 Select AddGeometryColumn('lm3', 'layer', 'geom', 4326, 'POLYGON', 2);
 ALTER TABLE lm3.Layer ADD CONSTRAINT geometry_valid_check CHECK (st_isvalid(geom));
 ALTER TABLE lm3.layer ADD CONSTRAINT enforce_srid_geom CHECK (st_srid(geom) = 4326);
 ALTER TABLE lm3.layer ADD CONSTRAINT enforce_dims_geom CHECK (st_ndims(geom) = 2);
 CREATE INDEX spidx_layer ON lm3.Layer USING GIST ( geom );
 ALTER TABLE lm3.Layer ADD CONSTRAINT lyrtypefk FOREIGN KEY (layerTypeId) REFERENCES lm3.LayerType (layerTypeId);

-- -------------------------------
create table lm3.ScenarioLayers
(
   scenarioId int REFERENCES lm3.Scenario,
   layerId int REFERENCES lm3.Layer,
   PRIMARY KEY (scenarioId, layerId)
);

-- -------------------------------
create table lm3.Keyword
(
   keywordId serial UNIQUE PRIMARY KEY,
   keyword varchar(100) UNIQUE
);

-- -------------------------------
create table lm3.LayerTypeKeyword
(
   layerTypeId int REFERENCES lm3.LayerType,
   keywordId int REFERENCES lm3.Keyword
   -- PRIMARY KEY (layerTypeCode, keywordId)
);

-- -------------------------------
create table lm3.ScenarioKeywords
(
   scenarioId int REFERENCES lm3.Scenario,
   keywordId int REFERENCES lm3.Keyword,
   PRIMARY KEY (scenarioId, keywordId)
);

-- -------------------------------
-- location of the ruleset can be calculated from the base pathname for models
-- (probably /export/data/models), the species id, and the rulesetFile. 
-- The 'algorithmParams' column is a pickled (protocol=0) dictionary of 
-- algorithm parameters with the 
   -- key = case sensitive parameter name (previously omkey)
   -- value = parameter value for this model 

create table lm3.Model 
(
   modelId serial UNIQUE PRIMARY KEY,
   userId varchar(20) REFERENCES lm3.LMUser,
   name varchar(100) NOT NULL,
   description text,
   occurrenceSetId int REFERENCES lm3.OccurrenceSet,
   scenarioCode varchar(30),
   scenarioId int REFERENCES lm3.Scenario,
   maskId int,
   createTime double precision,
   status int,
   statusModTime double precision,
   priority int,
   rulesetFile varchar(30),
   qc varchar(20),
   jobId int,
   email varchar(64), 
   algorithmParams text,
   algorithmCode varchar(30) NOT NULL REFERENCES lm3.Algorithm(algorithmCode),
   computeResourceId int REFERENCES lm3.ComputeResource
);
CREATE INDEX idx_mdlLastModified ON lm3.Model(statusModTime);
CREATE INDEX idx_modelUser ON lm3.Model(userId);

-- -------------------------------
-- Tables lm3.ComputeResource, lm3.LMJob, lm3.LMUser in createCommon.sql

-- -------------------------------
-- Holds projection of a ruleset on to a set of environmental layers
-- 
create table lm3.Projection
(
   projectionId serial UNIQUE PRIMARY KEY,
   -- todo: change from guid varchar(100) to metadataUrl varchar(256)
   metadataUrl varchar(256) UNIQUE,
   modelId int REFERENCES lm3.Model,
   scenarioCode varchar(30),
   scenarioId int REFERENCES lm3.Scenario,
   maskId int REFERENCES lm3.Layer,
   createTime double precision,
   status int,
   statusModTime double precision,
   priority int,
   units varchar(20),
   resolution double precision,
   epsgcode int,
   bbox varchar(60),
   -- dataPath+dataFilename = dlocation
   dataFilename varchar(60),
   dataPath varchar(60),
   dataType int,
   jobId int,
   computeResourceId int REFERENCES lm3.ComputeResource
);  
Select AddGeometryColumn('lm3', 'projection', 'geom', 4326, 'POLYGON', 2);
ALTER TABLE lm3.Projection ADD CONSTRAINT geometry_valid_check CHECK (st_isvalid(geom));
ALTER TABLE lm3.Projection ADD CONSTRAINT enforce_srid_geom CHECK (st_srid(geom) = 4326);
ALTER TABLE lm3.Projection ADD CONSTRAINT enforce_dims_geom CHECK (st_ndims(geom) = 2);

CREATE INDEX spidx_projection ON lm3.Projection USING GIST ( geom );
CREATE INDEX idx_projLastModified ON lm3.Projection(statusModTime);

-- ----------------------------------------------------------------------------
create table lm3.Statistics
(
   statisticsId serial UNIQUE PRIMARY KEY,
   dateLastModified double precision,
   description varchar(256),
   key varchar(100) UNIQUE,
   value int,
   query varchar(256)
);


-- ----------------------------------------------------------------------------

GRANT SELECT ON TABLE 
lm3.lmuser, 
lm3.scenario, lm3.scenario_scenarioid_seq,
lm3.keyword, lm3.keyword_keywordid_seq, 
lm3.layer, lm3.layer_layerid_seq, 
lm3.layertype, lm3.layertype_layertypeid_seq,
lm3.layertypekeyword, lm3.scenariokeywords, lm3.scenariolayers,
lm3.occurrenceset, lm3.occurrenceset_occurrencesetid_seq, 
lm3.model, lm3.model_modelid_seq, 
lm3.algorithm, lm3.algorithm_algorithmid_seq,
lm3.projection, lm3.projection_projectionid_seq,
lm3.statistics, lm3.statistics_statisticsid_seq,
lm3.computeresource, lm3.computeresource_computeresourceid_seq,
lm3.lmjob, lm3.lmjob_lmjobid_seq,
lm3.experiment, lm3.experiment_experimentid_seq,
lm3.taxonomysource, lm3.taxonomysource_taxonomysourceid_seq,
lm3.scientificname, lm3.scientificname_scientificnameid_seq
TO GROUP reader;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE 
lm3.lmuser, 
lm3.algorithm, 
lm3.scenario,
lm3.keyword,
lm3.layer, lm3.layertype,
lm3.layertypekeyword, lm3.scenariokeywords, lm3.scenariolayers,
lm3.occurrenceset, 
lm3.model,  
lm3.projection,
lm3.statistics,
lm3.computeresource, 
lm3.lmjob,
lm3.experiment,
lm3.taxonomysource,
lm3.scientificname
TO GROUP writer;

GRANT SELECT, UPDATE ON TABLE 
lm3.occurrenceset_occurrencesetid_seq,
lm3.algorithm_algorithmid_seq,
lm3.keyword_keywordid_seq,
lm3.scenario_scenarioid_seq,
lm3.layer_layerid_seq,
lm3.layertype_layertypeid_seq,
lm3.model_modelid_seq,
lm3.projection_projectionid_seq,
lm3.statistics_statisticsid_seq,
lm3.computeresource_computeresourceid_seq,
lm3.lmjob_lmjobid_seq,
lm3.experiment_experimentid_seq,
lm3.taxonomysource_taxonomysourceid_seq,
lm3.scientificname_scientificnameid_seq
TO GROUP writer;

