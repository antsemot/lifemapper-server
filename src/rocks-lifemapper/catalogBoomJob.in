#!/bin/bash 

# Purpose: define a BOOM archive and populate the database with input metadata
#
# This script is run by a superuser

usage () 
{
    echo "Usage: $0 <initialization filename>"
    echo "This script is run by the superuser. It will "
    echo "     - run initboom.py to populate the databases with BOOM inputs"
    echo "       in the initialization file or the default configuration"
    echo "   "
    echo "The output of the script is in @LMSCRATCHDISK@/log/`/bin/basename $0`.log"
    # psql -U admin -d borg -c "COPY (select * from lm_v3.taxon where taxonomysourceid = 1) 
    # TO STDOUT WITH CSV HEADER" > /tmp/taxon.csv
}

if [ $# -ne 1 ]; then
    usage
    exit 0
fi 

### define varibles
SetDefaults () {
    INIT_CONFIG=$1

    # config files
    CONFIG_FILE=@LMHOME@/config/config.lmserver.ini
    SITE_CONFIG_FILE=@LMHOME@/config/config.site.ini

    # script
    BOOMCAT_PY=@LMHOME@/LmDbServer/tools/catalogBoomInputs.py
#     BOOMFLOW_PY=@LMHOME@/LmDbServer/tools/catalogWriteBoomMakeflows.py

    THISNAME=`/bin/basename $0`
    LOG=@LMSCRATCHDISK@/log/$THISNAME.log
    rm -f $LOG
    touch $LOG

    if [ -f $INIT_CONFIG ] ; then
        echo "Looking for DATASOURCE, ARCHIVE_USER, TREE in user config file $INIT_CONFIG"   | tee -a $LOG  
        DATASOURCE=`grep -i DATASOURCE $INIT_CONFIG | grep -v ';' | awk '{print $2}'`
        ARCHIVE_USER=`grep -i ARCHIVE_USER $INIT_CONFIG | grep -v _EMAIL | grep -v ';' | awk '{print $2}'`
        SCEN_PKG==`grep -i SCENARIO_PACKAGE $INIT_CONFIG | grep -v ';' | awk '{print $2}'`
        TREE_BASENAME=`grep -i TREE $INIT_CONFIG | grep -v ';' | awk '{print $2}'`
        ARCHIVE_NAME=`grep -i ARCHIVE_NAME $INIT_CONFIG | grep -v ';' | awk '{print $2}'`
        BIOGEO_HYPOTHESES=`grep -i BIOGEO_HYPOTHESES $INIT_CONFIG | grep -v ';' | awk '{print $2}'`
    fi

    if [ ! "$ARCHIVE_USER" ] ; then
        echo "Error: Missing value for ARCHIVE_USER" | tee -a $LOG
        exit 1
    fi
    if [ ! "$ARCHIVE_NAME" ] ; then
        echo "Error: Missing value for ARCHIVE_NAME" | tee -a $LOG
        exit 1
    fi
    if [ ! "$DATASOURCE" ] ; then
        echo "Error: Missing value for DATASOURCE" | tee -a $LOG
        exit 1
    fi
    if [ ! "$SCEN_PKG" ] ; then
        echo "Error: Missing value for SCENARIO_PACKAGE" | tee -a $LOG
        exit 1
    fi
    
    ARCHIVE_USER_DATA_DIR=@DATADIR_SHARED@/archive/$ARCHIVE_USER    
}

TimeStamp () {
    echo $1 `/bin/date` >> $LOG
}

### populate lifemapper DB with inputs for Global PAM and 
### makeflows to begin computing the BOOM workflow
PopulateBoomInputs () {
    if [ -f $BOOMCAT_PY ] ; then
        echo "Catalogs BOOM $INIT_CONFIG inputs then inserts a makeflow to create and run tasks with '$BOOMCAT_PY' ..." | tee -a $LOG
        /opt/python/bin/@PYTHONVER@ $BOOMCAT_PY  $INIT_CONFIG --init_makeflow=True \
                                         2>&1 | tee -a $LOG
    else
        echo "Error: Missing file $BOOMCAT_PY" | tee -a $LOG
        exit 1
    fi   
}

# ### write and catalog makeflows to begin computing the BOOM workflow
# WriteBoomMakeflows () {
#     if [ -f $BOOMFLOW_PY ] ; then
#         echo "Catalog and write BOOM $INIT_CONFIG makeflows to run tasks with '$BOOMFLOW_PY' ..." | tee -a $LOG
#         /opt/python/bin/@PYTHONVER@ $BOOMFLOW_PY  $INIT_CONFIG  2>&1 | tee -a $LOG
#     else
#         echo "Error: Missing file $BOOMFLOW_PY" | tee -a $LOG
#         exit 1
#     fi   
# }


FixPermissions () {
    /bin/egrep -i "^lmwriter" /etc/passwd
    if [ $? -ne 0 ]; then
        echo "Error: user lmwriter does not exist" | tee -a $LOG
        exit 1
    fi

    # This script is run by root, so set group write permission on data dir if default
    echo "Update lmwriter group permissions on $ARCHIVE_USER_DATA_DIR" | tee -a $LOG
    /bin/chgrp -R lmwriter $ARCHIVE_USER_DATA_DIR
    /bin/chmod -R g+ws     $ARCHIVE_USER_DATA_DIR
}


### Main ###
SetDefaults $1
TimeStamp "# Start"

PopulateBoomInputs
# TODO: separate Makeflow creation into different script, but need config file
# output by PopulateBoomInputs.
#WriteBoomMakeflows

FixPermissions
TimeStamp "# End"
