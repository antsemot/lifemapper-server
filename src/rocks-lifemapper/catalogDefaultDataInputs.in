#!/bin/bash 

# Purpose: define a BOOM archive and populate the database with input metadata
#
# This script is run by a superuser

usage () 
{
    echo "Usage: $0 <initialization filename>"
    echo "This script is run by the superuser. It will populate the database by running"
    echo "     - catalogDefaults.py for default users, datasources and algorithms"
    echo "     - catalogScenPkg.py for environmental scenarios for the public user"
    echo "     - catalogBoomInputs.py to create the archive defined by the"
    echo "       provided initialization file "
    echo "   "
    echo "The output of the script is in @LMSCRATCHDISK@/log/`/bin/basename $0`.log"
}

### define varibles
SetDefaults () {
    if [ $# -eq 0 ]; then
        INIT_CONFIG=0
    else
        INIT_CONFIG=$1
    fi

    # config files
    CONFIG_FILE=@LMHOME@/config/config.lmserver.ini
    SITE_CONFIG_FILE=@LMHOME@/config/config.site.ini
    BOOM_PARAMS=@LMHOME@/rocks/etc/defaultArchiveParams.ini

    # script
    DEFCAT_PY=@LMHOME@/LmDbServer/tools/catalogDefaults.py    
    SCENCAT_PY=@LMHOME@/LmDbServer/tools/catalogScenPkg.py    
    BOOMCAT_PY=@LMHOME@/LmDbServer/tools/catalogBoomInputs.py

    THISNAME=`/bin/basename $0`
    LOG=@LMSCRATCHDISK@/log/$THISNAME.log
    rm -f $LOG
    touch $LOG

    if [ -f $INIT_CONFIG ] ; then
        echo "Looking for DATASOURCE, ARCHIVE_USER, TREE in user config file $INIT_CONFIG"   | tee -a $LOG  
        DATASOURCE=`grep -i DATASOURCE $INIT_CONFIG | grep -v ';' | awk '{print $2}'`
        ARCHIVE_USER=`grep -i ARCHIVE_USER $INIT_CONFIG | grep -v _EMAIL | grep -v ';' | awk '{print $2}'`
        SCEN_PKG==`grep -i SCENARIO_PACKAGE $INIT_CONFIG | grep -v ';' | awk '{print $2}'`
        TREE_BASENAME=`grep -i TREE $INIT_CONFIG | grep -v ';' | awk '{print $2}'`
        ARCHIVE_NAME=`grep -i ARCHIVE_NAME $INIT_CONFIG | grep -v ';' | awk '{print $2}'`
        BIOGEO_HYPOTHESES=`grep -i BIOGEO_HYPOTHESES $INIT_CONFIG | grep -v ';' | awk '{print $2}'`
    fi

    if [ ! "$DATASOURCE" ] ; then 
        # look in config.site.ini
        if [ -f $SITE_CONFIG_FILE ] ; then        
            echo "Looking for DATASOURCE in site config file"   | tee -a $LOG  
            DATASOURCE=`grep -i DATASOURCE $SITE_CONFIG_FILE | grep -v ';' | awk '{print $2}'`
        fi
        
        # look in installed config file        
        if [ ! "$DATASOURCE" ] ; then 
            echo "Looking for DATASOURCE in installed config file"   | tee -a $LOG  
            DATASOURCE=`grep -i DATASOURCE $CONFIG_FILE | grep -v ';' | awk '{print $2}'`
        fi
    fi
    
    if [ ! "$ARCHIVE_USER" ] ; then 
        # look in config.site.ini
        if [ -f $SITE_CONFIG_FILE ] ; then        
            echo "Looking for ARCHIVE_USER in site config file"   | tee -a $LOG  
            ARCHIVE_USER=`grep -i ARCHIVE_USER $SITE_CONFIG_FILE | grep -v _EMAIL | grep -v ';' | awk '{print $2}'`
        fi
        
        # look in installed config file        
        if [ ! "$ARCHIVE_USER" ] ; then 
            echo "Looking for ARCHIVE_USER in installed config file"   | tee -a $LOG  
            ARCHIVE_USER=`grep -i ARCHIVE_USER $CONFIG_FILE | grep -v _EMAIL | grep -v ';' | awk '{print $2}'`
        fi
    fi
    
    if [ ! "$SCEN_PKG" ] ; then 
        # look in config.site.ini
        if [ -f $SITE_CONFIG_FILE ] ; then        
            echo "Looking for SCENARIO_PACKAGE in site config file"   | tee -a $LOG  
            SCEN_PKG=`grep -i SCENARIO_PACKAGE $SITE_CONFIG_FILE | grep -v ';' | awk '{print $2}'`
        fi
        
        # look in installed config file        
        if [ ! "$SCEN_PKG" ] ; then 
            echo "Looking for SCENARIO_PACKAGE in installed config file"   | tee -a $LOG  
            SCEN_PKG=`grep -i SCENARIO_PACKAGE $CONFIG_FILE | grep -v ';' | awk '{print $2}'`
        fi
    fi
    if [ ! "$ARCHIVE_USER" ] ; then
        echo "Error: Missing value for ARCHIVE_USER" | tee -a $LOG
        exit 1
    fi
    if [ ! "$DATASOURCE" ] ; then
        echo "Error: Missing value for DATASOURCE" | tee -a $LOG
        exit 1
    fi
    if [ ! "$SCEN_PKG" ] ; then
        echo "Error: Missing value for SCENARIO_PACKAGE" | tee -a $LOG
        exit 1
    fi
    
    ARCHIVE_USER_DATA_DIR=@DATADIR_SHARED@/archive/$ARCHIVE_USER    
}

TimeStamp () {
    echo $1 `/bin/date` >> $LOG
}

### populate lifemapper DB with Algorithms and default metadata, no makeflow
PopulateDefaults () {
    if [ -f $BORG_DEFCAT_PY ] ; then
        echo "Cataloging default inputs and parameters with '$DEFCAT_PY' ..." | tee -a $LOG
        /opt/python/bin/@PYTHONVER@ $DEFCAT_PY 2>&1 | tee -a $LOG
    else
        echo "Error: Missing file $DEFCAT_PY" | tee -a $LOG
        exit 1
    fi
}

### populate lifemapper DB with environmental scenario inputs for default users, no makeflow
PopulateScenariosForPublic () {
    if [ -f $SCENCAT_PY ] ; then
        echo "Cataloging env data $SCEN_PKG for user $ARCHIVE_USER with '$SCENCAT_PY' ..." | tee -a $LOG
        /opt/python/bin/@PYTHONVER@ $SCENCAT_PY  $ARCHIVE_USER  $SCEN_PKG \
                                         2>&1 | tee -a $LOG
    else
        echo "Error: Missing file $SCENCAT_PY" | tee -a $LOG
        exit 1
    fi
}


### populate lifemapper DB with inputs for Global PAM and 
### a makeflow to begin computing the BOOM workflow
PopulateBoomInputsForPublic () {
    if [ -f $BOOMCAT_PY ] ; then
        echo "Catalog BOOM $BOOM_PARAMS inputs then insert a makeflow to create and run tasks with '$BOOMCAT_PY' ..." | tee -a $LOG
        /opt/python/bin/@PYTHONVER@ $BOOMCAT_PY  $BOOM_PARAMS --init_makeflow=True \
                                         2>&1 | tee -a $LOG
    else
        echo "Error: Missing file $BOOMCAT_PY" | tee -a $LOG
        exit 1
    fi
}


FixPermissions () {
    /bin/egrep -i "^lmwriter" /etc/passwd
    if [ $? -ne 0 ]; then
        echo "Error: user lmwriter does not exist" | tee -a $LOG
        exit 1
    fi

    # This script is run by root, so set group write permission on data dir if default
    echo "Update lmwriter group permissions on $ARCHIVE_USER_DATA_DIR" | tee -a $LOG
    /bin/chgrp -R lmwriter $ARCHIVE_USER_DATA_DIR
    /bin/chmod -R g+ws     $ARCHIVE_USER_DATA_DIR
}


### Main ###
if [ $# -gt 1 ]; then
    usage
    exit 0
fi 

SetDefaults $1
TimeStamp "# Start"
PopulateDefaults
# PopulateBoomInputs includes scenarios
PopulateBoomInputsForPublic
FixPermissions
TimeStamp "# End"
