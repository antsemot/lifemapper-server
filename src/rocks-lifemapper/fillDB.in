#!/bin/bash 

# Purpose: define a BOOM archive and populate the database with input metadata
#
# This script is run by a superuser

usage () 
{
    echo "Usage: $0"
    echo "This script is run by the superuser. It will "
    echo "     - run boominput.py to populate the databases with default archive BOOM inputs"
    echo "   "
    echo "The output of the script is in @LMSCRATCHDISK@/log/`/bin/basename $0`.log"
}

### define varibles
SetDefaults () {
    # scripts
    BORG_POPULATEPY=@LMHOME@/LmDbServer/boom/boominput.py

	 # config files
    CONFIG_FILE=@LMHOME@/config/config.lmserver.ini
    SITE_CONFIG_FILE=@LMHOME@/config/config.site.ini
    
    # get the DATASOURCE  and ARCHIVE_USER values 
    # from config.site.ini or config.lmserver.ini file
    echo "Looking for DATASOURCE and ARCHIVE_USER in site config file"   | tee -a $LOG  
    DATASOURCE=`grep DATASOURCE $SITE_CONFIG_FILE | grep -v ';' | awk '{print $2}'`
    ARCHIVE_USER=`grep ARCHIVE_USER $SITE_CONFIG_FILE | grep -v ';' | awk '{print $2}'`

    if [ ! "$DATASOURCE" ] ; then 
        echo "Looking for DATASOURCE in installed config file"   | tee -a $LOG  
        DATASOURCE=`grep DATASOURCE $CONFIG_FILE | grep -v ';' | awk '{print $2}'`
    fi
    
    if [ ! "$ARCHIVE_USER" ] ; then 
        echo "Looking for $ARCHIVE_USER in installed config file"   | tee -a $LOG  
        ARCHIVE_USER=`grep ARCHIVE_USER $CONFIG_FILE | grep -v ';' | awk '{print $2}'`
    fi
    
    ARCHIVE_USER_DATA_DIR=@DATADIR_SHARED@/archive/$ARCHIVE_USER
    if [ ! -d $ARCHIVE_USER_DATA_DIR ] ; then
       IS_NEW_USER_DIR=true
    else
       IS_NEW_USER_DIR=false
    fi
    
    LOG=@LMSCRATCHDISK@/log/`/bin/basename $0`.log
    rm -f $LOG
    touch $LOG
}

TimeStamp () {
    echo $1 `/bin/date` >> $LOG
}

### populate lifemapper DB with Archive BOOM inputs
Populate () {
    if [ -f $BORG_POPULATEPY ] ; then
        echo "Running '$BORG_POPULATEPY'..." | tee -a $LOG
        /opt/python/bin/@PYTHONVER@ $BORG_POPULATEPY 2>&1 | tee -a $LOG
    else
        echo "Error: Missing file $BORG_POPULATEPY" | tee -a $LOG
        exit 1
    fi
}

FixPermissions () {
    /bin/egrep -i "^lmwriter" /etc/passwd
    if [ $? -ne 0 ]; then
        echo "Error: user lmwriter does not exist" | tee -a $LOG
        exit 1
    fi

    # This script is run by root, so set group write permission on new data dir
    echo "Create and set group write permission on new $ARCHIVE_USER data dir"   | tee -a $LOG
    if [ $IS_NEW_USER_DIR ] ; then
       echo "Update lmwriter group permissions on $ARCHIVE_USER_DATA_DIR" | tee -a $LOG
       /bin/chown -R lmwriter:lmwriter $ARCHIVE_USER_DATA_DIR
       /bin/chmod -R g+ws $ARCHIVE_USER_DATA_DIR
    fi
}

### read and populate taxonomy table
CheckForTaxonomy () {
    if [ $DATASOURCE = "GBIF" -o $DATASOURCE = "IDIGBIO" ] ; then
        echo "Run fillGBIFTaxonomy to add GBIF Backbone Taxonomy to the database" | tee -a $LOG
    else
        echo "Notice: DATASOURCE=$DATASOURCE: No taxonomy to ingest" | tee -a $LOG
        return 
    fi
}

### Main ###
if [ $# -ne 0 ]; then
    usage
    exit 0
fi 

SetDefaults
TimeStamp "# Start"
Populate
CheckForTaxonomy
FixPermissions
TimeStamp "# End"
