#!/bin/bash
#
# This script downloads a test data package, containing a scenario package, 
# occurrence package, and a BOOM parameter file.  It uncompresses and places
# data in the correct directories.
# The script can be run at any time to download test data, 
# and install environmental data, catalog scenarios and processing an SDM workflow.

usage () 
{
    echo "Usage: $0 <TEST_PACKAGE_NAME>"
    echo "This script is run on an existing lifemapper-server installation. "
    echo "It will:"
    echo "     - download the TEST_PACKAGE_NAME data into the "
    echo "       @LMSCRATCHDISK@/temp directory, then install environmental"
    echo "       data into the @DATADIR_SHARED@/@ENV_DATA_DIR@ directory, and"
    echo "       species data into the @DATADIR_SHARED@/archive/<user> directory"
    echo "   "
    echo "The script can be run at any time to download and install data for"
    echo "a BOOM run."
    echo "   "
}

if [ $# -ne 1 ]; then
    usage
    exit 0
fi 

set_defaults() {
    LMURL=@LMURL@
    THISNAME=`/bin/basename $0`

    LOG=@LMSCRATCHDISK@/log/$THISNAME.log
    rm -f $LOG
    touch $LOG
    
    TEMP_DIR=@LMSCRATCHDISK@/temp
    CLIMATE_DIR=@DATADIR_SHARED@/@ENV_DATA_DIR@

    # *_PKG variables are file basenames, no path or file extension
    TEST_PKG=$1
    TEST_PKG_FILE=$TEMP_DIR/$TEST_PKG.@TARBALL_POSTFIX@
    TEST_META_FILE=$TEMP_DIR/$TEST_PKG.ini
}


### Retrieve test package named in TEST_PACKAGE
pull_test_package () {
    # find metadata file testpkgname.ini
    if [ -f $TEST_META_FILE ]; then
        echo "Test metadata $TEST_META_FILE already present" | tee -a $LOG
    else  
        echo "Fetch test data into $TEST_PKG_FILE" | tee -a $LOG
        curl -L "$LMURL/$TEST_PKG.@TARBALL_POSTFIX@" -o $TEST_PKG_FILE 
  
        # uncompress 
        if [ -f $TEST_PKG_FILE ]; then
            tar xzf $TEST_PKG_FILE -C $TEMP_DIR/
            rm -f $TEST_PKG_FILE 
        else
            echo "Failed to retrieve $TEST_PKG_FILE ..." | tee -a $LOG
            exit 1
        fi        
}

### Read data file names from test package metadata
read_test_datanames () {
    SCEN_PKG=`grep -i ENVIRONMENTAL_PACKAGE $TEST_META_FILE | grep -v ';' | awk '{print $2}'`
    POINT_PKG=`grep -i SPECIES_PACKAGE $TEST_META_FILE | grep -v ';' | awk '{print $2}'`
    BOOM_PARAM_BASENAME=`grep -i BOOM_PARAMETER_FILE $TEST_META_FILE | grep -v ';' | awk '{print $2}'`

    echo "Var SCEN_PKG = $SCEN_PKG" | tee -a $LOG
    echo "Var POINT_PKG = $POINT_PKG" | tee -a $LOG
    echo "Var BOOM_PARAM_BASENAME = $BOOM_PARAM_BASENAME" | tee -a $LOG       

    CLIMATE_META_FILE=$CLIMATE_DIR/$SCEN_PKG.py        
    BOOM_PARAM_FILE=$TEMP_DIR/$BOOM_PARAM_BASENAME
}

### Retrieve ARCHIVE_USER from BOOM parameter file package 
get_user_create_dir () {
	 # Get the test Boom user name
    if [ -f $BOOM_PARAM_FILE ]; then
        echo "Find ARCHIVE_USER for BOOM in $BOOM_PARAM_FILE" | tee -a $LOG
        BOOM_USER=`grep -i ARCHIVE_USER $BOOM_PARAM_FILE | grep -v _EMAIL | grep -v ';' | awk '{print $2}'`
        USER_DIR=@DATADIR_SHARED@/archive/$BOOM_USER
        echo "Var BOOM_USER = $BOOM_USER" | tee -a $LOG
    else 
        echo "Failed to find $BOOM_PARAM_FILE" | tee -a $LOG
        exit 1
    fi

	 # Find or create the test Boom data directory
    if [ -d $USER_DIR ]; then
        echo "ARCHIVE_USER data directory $USER_DIR already exists" | tee -a $LOG
    else 
        echo "Create data directory $USER_DIR" | tee -a $LOG
        /bin/mkdir $USER_DIR 
    fi
    
    # Set User data filenames
    POINT_META_FILE=$USER_DIR/$POINT_PKG.meta
}

### Move climate data named in POINT_PKG
install_occ_data () {
    # find metadata file pkgname.py
    if [ -f $POINT_META_FILE ]; then
        echo "Point metadata $POINT_META_FILE already present" | tee -a $LOG
        rm -f $TEMP_DIR/$POINT_PKG.@TARBALL_POSTFIX@ 
    else  
        # uncompress 
        if [ -f $TEMP_DIR/$POINT_PKG.@TARBALL_POSTFIX@ ]; then
            echo "Uncompress point data into $USER_DIR" | tee -a $LOG
            tar xzf $TEMP_DIR/$POINT_PKG.@TARBALL_POSTFIX@ -C $USER_DIR/
            rm -f $TEMP_DIR/$POINT_PKG.@TARBALL_POSTFIX@ 
        else
            echo "Failed to find $POINT_PKG ..." | tee -a $LOG
            exit 1
        fi
    fi
}

### Move occurrence data named in SCENARIO_PACKAGE
install_climate_data () {
    # find metadata file pkgname.py
    if [ -f $CLIMATE_META_FILE ]; then
        echo "Climate metadata $CLIMATE_META_FILE already present" | tee -a $LOG
        rm -f $TEMP_DIR/$SCEN_PKG.@TARBALL_POSTFIX@
    else  
        # uncompress 
        if [ -f $TEMP_DIR/$SCEN_PKG.@TARBALL_POSTFIX@ ]; then
            echo "Uncompress climate data into $CLIMATE_DIR" | tee -a $LOG
            tar xzf $TEMP_DIR/$SCEN_PKG.@TARBALL_POSTFIX@ -C $CLIMATE_DIR/
            rm -f $TEMP_DIR/$SCEN_PKG.@TARBALL_POSTFIX@
        else
            echo "Failed to retrieve $SCEN_PKG ..." | tee -a $LOG
            exit 1
        fi
    fi
}

fix_permissions () {
    /bin/egrep -i "^lmwriter" /etc/passwd
    if [ $? -ne 0 ]; then
        echo "Error: user lmwriter does not exist" | tee -a $LOG
        exit 1
    fi

    # This script is run by root, so set group write permission on new data dir
    echo "Reset group and write permission on $CLIMATE_DIR data dir"   | tee -a $LOG
    /bin/chgrp -R lmwriter $CLIMATE_DIR
    /bin/chmod -R g+ws     $CLIMATE_DIR

    echo "Set/reset group and write permission on $USER_DIR data dir"   | tee -a $LOG
    if [ -d $USER_DIR ]; then
        /bin/chgrp -R lmwriter $USER_DIR
        /bin/chmod -R g+ws     $USER_DIR
    fi
    
    echo "Cleanup files in $TEMP_DIR"   | tee -a $LOG
    rm -f $TEST_META_FILE
    rm -f $BOOM_PARAM_FILE
}


instruct_user () {
    echo "*****************"   | tee -a $LOG
    echo "To seed climate layers, run:"   | tee -a $LOG
    echo "@LMHOME@/rocks/bin/seedData $SCEN_PKG"   | tee -a $LOG
    echo "*****************"   | tee -a $LOG
    echo ""   | tee -a $LOG
    echo "*****************"   | tee -a $LOG
    echo "To initialize BOOM for User $BOOM_USER, run:"   | tee -a $LOG
    echo "@LMHOME@/rocks/bin/fillDB $BOOM_PARAM_FILE"   | tee -a $LOG
    echo "*****************"   | tee -a $LOG
}

TimeStamp () {
    echo $1 `/bin/date` >> $LOG
}

####### Main #######
set_defaults $1
TimeStamp "# Start"

pull_test_package
read_test_datanames
get_user_create_dir
install_occ_data
install_climate_data
fix_permissions
instruct_user

TimeStamp "# End"
