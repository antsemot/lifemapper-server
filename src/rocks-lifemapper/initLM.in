#!/bin/bash
#
# This script is creates configuration files for postgres and pgbouncer. 
# The script can be run at any time to remove all the previous configuration
# and create a new one. 

usage () 
{
    echo "Usage: $0"
    echo "This script is run during the roll install and will:"
    echo "     - initialize postgress db"
    echo "     - create lifemapper db users"
    echo "     - creating roles and postgis tables"
    echo "     - create new config and auth files for postgres "
    echo "     - create new config for pgbouncer "
    echo "     - set postgres unix socket PGHOST=@UNIXSOCKET@"
    echo "     - restart postgres/pgbouncer with new configuration\n"
    echo "     - inserts host IP in @LMHOME@/config/config.lmserver.ini\n"
    echo "     - installs cron files\n"
    echo "     - installs mapfile imagery\n"
    echo "   "
    echo "The script can be run at any time to remove all previous configuration and to create"
    echo "a new one. In this case, old postgres db data (/var/lib/pgsql/*/data/*) is removed."
}

if [ $# -ne 0 ]; then
    usage
    exit 0
fi 

set_defaults() {
    LOG=@LMSCRATCHDISK@/log/`/bin/basename $0`.log
    rm -f $LOG
    touch $LOG

    PROF=/etc/profile.d/lifemapper.sh
    echo "-- set environment"  | tee -a $LOG
    if [ -f $PROF ] ; then
	 . $PROF 
    else
    	echo "ERROR: file $PROF not found" | tee -a $LOG 
    	exit
    fi

    echo "-- enable modules"  | tee -a $LOG
    source /usr/share/Modules/init/bash

    # Rocks version
    ROCKS_VER=`/opt/rocks/bin/rocks list roll | grep base | awk '{print $2}'`
    if [ "$ROCKS_VER" = "7.0" ]; then
    	PG=`basename /usr/lib/systemd/system/postgresql-*.service`
    else
    	PG=`basename /etc/init.d/postgresql-*`
    fi
   
    PROFILE=/var/lib/pgsql/.bash_profile
    BIN=@PKGROOT@/rocks/bin
    USERSFILE=@PKGROOT@/rocks/etc/users

    DEFINE_TABLES_SQL=@LMHOME@/rocks/sql/dbDefineTables.sql
    UPDATE_TABLES_SQL=@LMHOME@/rocks/sql/dbUpdateTables.sql
    ADD_FUNCTIONS_SQL=@LMHOME@/rocks/sql/dbAddFunctions.sql
    
    tmp=@PGSQLVER@
    PVER=${tmp/.}
    PGSETUP_CMD=/usr/pgsql-@PGSQLVER@/bin/postgresql$PVER-setup

    MAP_BACKGROUND=@LMHOME@/LmWebServer/public_html/images/BMNG.geotiff
    IMAGE_DIR=@DATADIR_SERVER@/image
    # link url address to install of lifemapper-webclient rpm
    LMCLIENT_DIR=@DATADIR_SERVER@/@LMCLIENT@
    DASHBOARD_DIR=@LMHOME@/LmWebServer/public_html/@DASHBOARD@
    
    # config files
    CONFIG_FILE=@LMHOME@/config/config.lmserver.ini
    SITE_CONFIG_FILE=@LMHOME@/config/config.site.ini
    
    # Find SCENARIO_PACKAGE
    if [ -f $SITE_CONFIG_FILE ] ; then        
        echo "Find SCENARIO_PACKAGE in site config file"   | tee -a $LOG
        SCEN_PKG=`grep -i ^SCENARIO_PACKAGE $SITE_CONFIG_FILE | awk '{print $2}'`
    fi    
    if [ -z ${SCEN_PKG} ] ; then 
        echo "Find SCENARIO_PACKAGE in installed config file"   | tee -a $LOG
        SCEN_PKG=`grep -i ^SCENARIO_PACKAGE $CONFIG_FILE | awk '{print $2}'`
    fi
    # 
    if [ -z ${SCEN_PKG} ] ; then
        echo "Error: Missing configured value for SCENARIO_PACKAGE" | tee -a $LOG
        exit 1
    fi

    # Find PUBLIC_USER
    if [ -f $SITE_CONFIG_FILE ] ; then        
        echo "Find PUBLIC_USER in site config file"   | tee -a $LOG
        PUBLIC_USER=`grep -i ^PUBLIC_USER $SITE_CONFIG_FILE |  awk '{print $2}'`
    fi
    if [ -z ${PUBLIC_USER} ] ; then 
        echo "Find PUBLIC_USER in installed config file"   | tee -a $LOG
        PUBLIC_USER=`grep -i ^PUBLIC_USER $CONFIG_FILE | awk '{print $2}'`
    fi
    if [ -z ${PUBLIC_USER} ] ; then
        echo "Error: Missing configured value for PUBLIC_USER" | tee -a $LOG
        exit 1
    fi
    
    # Source function library.
    INITD=/etc/rc.d/init.d
    . $INITD/functions

    if [ -d /var/lib/pgsql/@PGSQLVER@/data ] && [ "$(ls -A /var/lib/pgsql/@PGSQLVER@/data)" ]; then
	    echo "postgres db exists" | tee -a $LOG
	    EXISTING_DB=true
	 else
	    EXISTING_DB=false
    fi
}

cmd_service () {
	svc=$1
	cmd=$2
    if [ "$ROCKS_VER" = "7.0" ]; then
    	/usr/bin/systemctl $2 $1  | tee -a $LOG
    else
    	/sbin/service $1 $2  | tee -a $LOG
    fi
}

cmd_opt_python () {
	cmd=$1
    echo "-- $1 opt-python"  | tee -a $LOG
    module $1 opt-python
    @PYBIN@ --version | tee -a $LOG
}

set_permissions () {
    /bin/egrep -i "^lmwriter" /etc/passwd
    if [ $? -ne 0 ]; then
        echo "Error: user lmwriter does not exist"  | tee -a $LOG
        exit 1
    fi

    echo "Update group permissions for lmwriter on @LMHOME@"  | tee -a $LOG
    for item in "config" "Lm*" "__init__.py*" ; do
        /bin/chgrp -R lmwriter @LMHOME@/$item
        /bin/chmod -R g+ws     @LMHOME@/$item
    done
}

### sets the password for db "admin" user to execute sql commands
set_password () {
    # check if users file exists
    if [ ! -f $USERSFILE ] ; then
        echo "Error: missing file $USERSFILE" | tee -a $LOG
        exit 1
    fi

    # check who is running the scipt
    cat $USERSFILE > /dev/null
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        echo "Error: You must be root to run this script" | tee -a $LOG
        exit 1
    fi

    # get the password from 'users' file
    echo "-- setting postgres password" | tee -a $LOG
    PASS=`grep admin $USERSFILE | awk '{print $2}'`
    export PGPASSWORD=$PASS
}

# stop services if running
stop_services () {
    echo "-- stop $PG and pgbouncer daemons " | tee -a $LOG

    if [ -f /var/run/pgbouncer/pgbouncer.pid ]; then
    	cmd_service pgbouncer stop
    fi

    if [ -f /var/run/$PG.pid ] ; then
    	cmd_service $PG stop
    fi

    prog="postmaster"
    if [ -n "`pidof $prog`" ]; then
        killproc  $prog
    fi
}

# Command listed when making rpm
finish_libevent_install () {
    # Complete libevent install
    echo "-- complete libevent install" | tee -a $LOG
    /usr/bin/libtool --finish @LMHOME@/lib
}

# run initdb, start postgres daemon
init_postgres () {
    # initdb creates postgres data/*
    echo "-- run postgres initdb" | tee -a $LOG
    # this option will not work via "service"
    # OPT="-E 'UTF-8' --lc-collate='en_US.UTF-8' --lc-ctype='en_US.UTF-8'"
    # OPT needs testing
    OPT="en_US.UTF-8"
    
    if [ "$ROCKS_VER" = "7.0" ]; then
    	$PGSETUP_CMD initdb | tee -a $LOG
    else
    	/sbin/service $PG initdb $OPT  | tee -a $LOG
    fi

    # start postgres with default config
    echo "-- start postgres with default config" | tee -a $LOG
    cmd_service $PG start
    /bin/sleep 15
}

# initialize postgres db
# create lifemapper db users and roles.sql 
# and initialize postgres db with user/postgis data
init_db() {
    init_postgres
    echo "-- Executing initDbserver (including confDbconnect)" | tee -a $LOG
    cmd_opt_python load
    $BIN/initDbserver >> $LOG
}

# populate Lifemapper tables
fill_db() {
    echo "-- Executing catalogDefaultDataInputs" | tee -a $LOG
    cmd_opt_python load
    $BIN/catalogDefaultDataInputs >> $LOG
}

# updat| tee -a $LOGpassword file for python
update_connect_file() {
    echo "-- update users passwords in @LMHOME@/LmServer/db/connect.py" | tee -a $LOG
    $BIN/confDbconnect >> $LOG  2>&1
}

### define databases 
define_lm_database () {
    if [ -f $DEFINE_TABLES_SQL ] ; then
        echo "Running $DEFINE_TABLES_SQL ..." | tee -a $LOG
        psql -U admin -d template1 -f $DEFINE_TABLES_SQL 2>&1 | tee -a $LOG
    else
        echo "Error: missing file $DEFINE_TABLES_SQL" | tee -a $LOG
        exit 1
    fi
}

### add database views, types, functions 
update_lm_tables () {
    if [ -f $UPDATE_TABLES_SQL ] ; then
        echo "Running $UPDATE_TABLES_SQL ..." | tee -a $LOG
        psql -U admin -d template1 -f $UPDATE_TABLES_SQL 2>&1 | tee -a $LOG
    else
        echo "Error: missing file $UPDATE_TABLES_SQL" | tee -a $LOG
        exit 1
    fi
}

### add database views, types, functions 
add_lm_functions () {
    if [ -f $ADD_FUNCTIONS_SQL ] ; then
        echo "Running $ADD_FUNCTIONS_SQL ..." | tee -a $LOG
        psql -U admin -d template1 -f $ADD_FUNCTIONS_SQL 2>&1 | tee -a $LOG
    else
        echo "Error: missing file $ADD_FUNCTIONS_SQL" | tee -a $LOG
        exit 1
    fi
}

# need to update openssl for postgres
update_openssl() {
    echo "-- yum update openssl" | tee -a $LOG
    cmd_opt_python unload 
    /usr/bin/yum --enablerepo base update openssl | tee -a $LOG 
    cmd_opt_python load 
}

# install cron jobs for daily execution
install_cron_jobs () {
    @LMHOME@/rocks/bin/installServerCronJobs
}

# set unix socket; restart postgres and pgbouncer with new config
start_services() {
    # set unix socket dir
    echo "-- update unix socket " | tee -a $LOG
    export PGHOST=@UNIXSOCKET@
    if [ ! -f $PROFILE ] ; then
        touch $PROFILE
        chown postgres:postgres $PROFILE
    fi
    echo "export PGHOST=@UNIXSOCKET@" >> $PROFILE

    # restart postgres with updated configuration
    echo "-- restart postgres with new configuration" | tee -a $LOG
    cmd_service $PG restart

    # start pgbouncer
    echo "-- restart pgbouncer with new configuration" | tee -a $LOG
    cmd_service pgbouncer restart
}

# run updateCfg to put correct IP, makeflow parameters lmserver's config.lmserver.ini 
update_config() {
    echo "-- update host IP and Makeflow/Workqueue parameters in @LMHOME@/config/config.lmserver.ini" | tee -a $LOG
    $BIN/updateCfg >> $LOG  2>&1
}

make_dashboard_link () {
    if [ -d $DASHBOARD_DIR ] ; then
        (cd /var/www/html; /usr/bin/ln -s $DASHBOARD_DIR)
        echo "Creating dashboard link" | tee -a $LOG
    fi
}

make_client_link () {
    if [ -d $LMCLIENT_DIR ] ; then
        (cd /var/www/html; /usr/bin/ln -s $LMCLIENT_DIR)
        echo "Creating lmclient link" | tee -a $LOG
    fi
}

TimeStamp () {
    echo $1 `/bin/date` >> $LOG
}

####### Main #######
set_defaults
TimeStamp "# Start"
finish_libevent_install
set_permissions
stop_services

if [ "$EXISTING_DB" = false ] ; then
    echo "Creating new database" | tee -a $LOG
    init_db
    start_services
    set_password
    define_lm_database
else
    echo "Database exists" | tee -a $LOG
    start_services
    set_password 
    update_connect_file
    update_lm_tables
fi

add_lm_functions
install_cron_jobs
update_config

if [ "$EXISTING_DB" = false ] ; then
    fill_db
fi

make_dashboard_link
make_client_link

TimeStamp "# End"
