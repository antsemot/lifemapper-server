#!/bin/bash
#
# This script is creates configuration files for postgres and pgbouncer. 
# The script can be run at any time to remove all the previous configuration
# and create a new one. 

usage () 
{
    echo "Usage: $0"
    echo "This script is run during the roll install it will:"
    echo "     - initialize postgress db"
    echo "     - create lifemapper db users"
    echo "     - creating roles and postgis tables"
    echo "     - create new config and auth files for postgres "
    echo "     - create new config for pgbouncer "
    echo "     - set postgres unix socket PGHOST=/var/run/postgresql"
    echo "     - restart postgres/pgbouncer with new configuration\n"
    echo "     - inserts host IP in @LMHOME@/config/config.lmserver.ini\n"
    echo "   "
    echo "The script can be run at any time to remove all previous configuration and to create"
    echo "a new one. In this case, old postgres db data (/var/lib/pgsql/*/data/*) is removed."
}

if [ $# -ne 0 ]; then
    usage
    exit 0
fi 

set_defaults() {
    PG=`basename /etc/init.d/postgresql-*`
    PROFILE=/var/lib/pgsql/.bash_profile
    BIN=@PKGROOT@/rocks/bin
    USERSFILE=@PKGROOT@/rocks/etc/users
    DEFINE_TABLES_SQL=@LMHOME@/LmDbServer/dbsetup/defineDBTables.sql
    UPDATE_TABLES_SQL=@LMHOME@/LmDbServer/dbsetup/updateDBTables.sql
    ADD_FUNCTIONS_SQL=@LMHOME@/LmDbServer/dbsetup/addDBFunctions.sql
    # Source function library.
    INITD=/etc/rc.d/init.d
    . $INITD/functions

    LOG=/tmp/`/bin/basename $0`.log
    touch $LOG
    TimeStamp "# Start"

    filecount=`ls -l /var/lib/pgsql/@PGSQLVER@/data/ | wc -l` 
    if [ $filecount = 0 ] || [ $filecount = 1 ]; then
	    EXISTING_DB=false
	 else
       echo "postgres db exists" >> $LOG
	    EXISTING_DB=true
    fi
}

### sets the password for db "admin" user to execute sql commands
set_password () {
    # check if users file exists
    if [ ! -f $USERSFILE ] ; then
        echo "Error: missing file $USERSFILE" >> $LOG
        exit 1
    fi

    # check who is running the scipt
    cat $USERSFILE > /dev/null
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        echo "Error: You must be root to run this script" >> $LOG
        exit 1
    fi

    # get the password from 'users' file
    echo "-- setting postgres password" >> $LOG
    PASS=`grep admin $USERSFILE | awk '{print $2}'`
    export PGPASSWORD=$PASS
}

# stop services if running
stop_services () {
    echo "-- stop $PG and pgbouncer daemons " >> $LOG

    if [ -f /var/run/pgbouncer/pgbouncer.pid ]; then
        /sbin/service pgbouncer stop >> $LOG
    fi

    if [ -f /var/run/$PG.pid ] ; then
        /sbin/service $PG stop >> $LOG
    fi

    prog="postmaster"
    if [ -n "`pidof $prog`" ]; then
        killproc  $prog
    fi
}

# rm old db data
clear_postgres () {
    if [ -d /var/lib/pgsql/@PGSQLVER@/data ]; then
            echo "-- removing postgres db data" >> $LOG
	    rm -rf /var/lib/pgsql/@PGSQLVER@/data/*
    fi
}

# run initdb, start postgres daemon
init_postgres () {
    # initdb creates postgres data/*
    echo "-- run postgres initdb" >> $LOG
    # this option will not work via "service"
    # OPT="-E 'UTF-8' --lc-collate='en_US.UTF-8' --lc-ctype='en_US.UTF-8'"
    # OPT needs testing
    OPT="en_US.UTF-8"
    /sbin/service $PG initdb $OPT  >> $LOG

    # start postgres with default config
    echo "-- start postgres with default config" >> $LOG
    /sbin/service $PG start >> $LOG
    /bin/sleep 15
}

# create lifemapper db users and roles.sql 
# and initialize postgres db with user/postgis data
dbserver_init() {
    echo "-- Executing initDbserver" >> $LOG
    $BIN/initDbserver >> $LOG
}

# initialize postgres db
init_db() {
    init_postgres
    dbserver_init
}

# define/populate Lifemapper tables
fill_db() {
    echo "-- Executing fillDB" >> $LOG
    . /etc/profile.d/lifemapper.sh
    $BIN/fillDB >> $LOG
}

# update user/password file for python
update_connect_file() {
    echo "-- update users passwords in @LMHOME@/LmServer/db/connect.py" >> $LOG
    $BIN/confDbconnect >> $LOG  2>&1
}

### define databases 
define_lm_database () {
    if [ -f $DEFINE_TABLES_SQL ] ; then
        echo "Running $DEFINE_TABLES_SQL ..." >> $LOG
        psql -U admin -d template1 -f $DEFINE_TABLES_SQL 2>&1 | tee -a $LOG
    else
        echo "Error: missing file $DEFINE_TABLES_SQL" >> $LOG
        exit 1
    fi
}

### add database views, types, functions 
update_lm_tables () {
    if [ -f $UPDATE_TABLES_SQL ] ; then
        echo "Running $UPDATE_TABLES_SQL ..." >> $LOG
        psql -U admin -d template1 -f $UPDATE_TABLES_SQL 2>&1 | tee -a $LOG
    else
        echo "Error: missing file $UPDATE_TABLES_SQL" >> $LOG
        exit 1
    fi
}

### add database views, types, functions 
add_lm_functions () {
    if [ -f $ADD_FUNCTIONS_SQL ] ; then
        echo "Running $ADD_FUNCTIONS_SQL ..." >> $LOG
        psql -U admin -d template1 -f $ADD_FUNCTIONS_SQL 2>&1 | tee -a $LOG
    else
        echo "Error: missing file $ADD_FUNCTIONS_SQL" >> $LOG
        exit 1
    fi
}

# need to update openssl for postgres
update_openssl() {
    echo "-- yum update openssl" >> $LOG
    /usr/bin/yum --enablerepo base update openssl >> $LOG 
}

# install cron jobs for daily execution
installCronJobs () {
    @LMHOME@/rocks/bin/installServerCronJobs
}

# set unix socket; restart postgres and pgbouncer with new config
start_services() {
    # set unix socket dir
    echo "-- update unix socket " >> $LOG
    export PGHOST=/var/run/postgresql
    if [ ! -f $PROFILE ] ; then
        touch $PROFILE
        chown postgres:postgres $PROFILE
    fi
    echo "export PGHOST=/var/run/postgresql" >> $PROFILE

    # restart postgres with updated configuration
    echo "-- restart postgres with new configuration" >> $LOG
    /sbin/service $PG restart >> $LOG

    # start pgbouncer
    echo "-- restart pgbouncer with new configuration" >> $LOG
    /sbin/service pgbouncer start >> $LOG
}

# run updateIP to put correct IP lmserver's config.lmserver.ini 
update_config() {
    echo "-- update host IP in @LMHOME@/config/config.lmserver.ini" >> $LOG
    $BIN/updateIP >> $LOG  2>&1
}

TimeStamp () {
    echo $1 `/bin/date` >> $LOG
}

####### Main #######
set_defaults
stop_services

if [ $EXISTING_DB = false ] ; then
    echo "Creating new database" >> $LOG
    init_db
    start_services
    set_password
    define_lm_database
else
    echo "Database exists" >> $LOG
    start_services
    set_password 
fi

update_lm_tables
add_lm_functions
installCronJobs
update_config
update_connect_file

if [ $EXISTING_DB = false ] ; then
    fill_db
fi

TimeStamp "# End"
