#!/bin/bash
#
# This script is creates configuration files for postgres and pgbouncer. 
# The script can be run at any time to remove all the previous configuration
# and create a new one. 

usage () 
{
    echo "Usage: $0"
    echo "This script updates host IP information in config files:"
    echo "     - initialize postgress db"
    echo "     - create lifemapper db users"
    echo "     - creating roles and postgis tables"
    echo "     - create new config and auth files for postgres "
    echo "     - create new config for pgbouncer "
    echo "     - update openssl (yum) "
    echo "     - set postgres unix socket PGHOST=/var/run/postgresql"
    echo "     - restart postgres/pgbouncer with new configuration\n"
    echo "     - inserts host IP in @LMHOME@/config/config.lmserver.ini\n"
    echo "   "
    echo "The script can be run after a VM is brought up on another network and LM configuration"
    echo "needs to be updated."
}

if [ $# -ne 0 ]; then
    usage
    exit 0
fi 

set_defaults() {
    # Source function library.
    INITD=/etc/rc.d/init.d
    . $INITD/functions

    PG=`basename /etc/init.d/postgresql-*`
    PROFILE=/var/lib/pgsql/.bash_profile
    LOG=/tmp/lifemapper-reconfig.log
    touch $LOG
    BIN=@PKGROOT@/rocks/bin

    TimeStamp "# Start"
}

# stop services if running
stop_services () {
    echo "-- stop $PG and pgbouncer daemons " >> $LOG

    if [ -f /var/run/pgbouncer/pgbouncer.pid ]; then
        /sbin/service pgbouncer stop >> $LOG
    fi

    if [ -f /var/run/$PG.pid ] ; then
        /sbin/service $PG stop >> $LOG
    fi

    prog="postmaster"
    if [ -n "`pidof $prog`" ]; then
        killproc  $prog
    fi
}


# set unix socket; restart postgres and pgbouncer with new config
start_services() {
    # restart postgres with updated configuration
    echo "-- restart postgres with updated configuration" >> $LOG
    /sbin/service $PG start >> $LOG

    # restart pgbouncer
    echo "-- restart pgbouncer with updated configuration" >> $LOG
    /sbin/service pgbouncer start >> $LOG
}

# create postgres and pgbouncer config and auth files
create_config_files() {
    # put correct IP in lmserver's config.lmserver.ini 
    echo "-- update host IP in @LMHOME@/config/config.lmserver.ini" >> $LOG
    $BIN/updateIP >> $LOG  2>&1

    # create postgres config file 
    echo "-- create postgres config file" >> $LOG
    $BIN/confPostgres pg >> $LOG

    # create md5 auth client info in config file
    echo "-- create postgres auth file " >> $LOG
    $BIN/confPostgres ca >> $LOG

    # create new pgbouncer config file 
    echo "-- create pgbouncer config file " >> $LOG
    $BIN/confPgbouncer >> $LOG
}

TimeStamp () {
    echo $1 `/bin/date` >> $LOG
}

####### Main #######
set_defaults
stop_services
create_config_files
start_services
TimeStamp "# End"
